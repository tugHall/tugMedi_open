


## Ensemble plot of TMB ========================================================================================


#### 
ls | xargs -i sh -c 'echo -n -e "{}\t"; tail -n 1 {}Output/cloneout.txt' |cut -f1,2,9|awk '$3 > 1e9' |xargs -n 3 sh -c 'awk -F"\t" "{print FILENAME, \$1-${1}, \$2, \$3, ${1}, ${2}}" ${0}Output/Info/TMB.txt ${0}Output/Info/TMB.drg.txt' |sed 's/ /\t/g'|cut -f1-4 | grep -P -v '\tTMB' | awk -F"\t" -v OFS="\t" '{print $1, $2 * CR, $3, $4}' > ../ensemble.TMB..txt 
### !!! Change: CR (conversion rate), eg, into 0.26 !!! 


library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)


ttr <- read.table("clipboard", header=F)


# V1: file name
# V2: Time
# V3: tumor_content
# V4: TMBvafx%


# tumor content
tt <- ttr[ ttr$V3 == 0.8, ]
#tt <- ttr[ ttr$V3 == 1.0, ]


## complete lacking time for aggregation
complete_time <- function( data, LorR ) {
  allTime <- sort( unique( data$V2 ) )
  
  data %>%
    group_by(V1) %>%
    complete(V2 = allTime) %>%
    mutate(
      left  = min( which( !is.na(V4) ) ) - 1,
      right = max( which( !is.na(V4) ) ) + 1,
      
      V4 = if   (LorR == "L") {
         if_else( row_number() <= left,  as.numeric(0), as.numeric(V4) )
      } else if (LorR == "R") {
         if_else( right <= row_number(), as.numeric(0), as.numeric(V4) )
      } else {
         V4
      }, 
      
      V4 = ifelse(is.na(V4), zoo::na.approx(V4, na.rm = FALSE, rule=1), V4),
    ) %>%
    ungroup()
} 

tt1 <- tt[ grepl("TMB\\.txt$",       tt$V1), ]
tt2 <- tt[ grepl("TMB\\.drg\\.txt$", tt$V1), ]
tt1 <- complete_time( tt1, "L" )
tt2 <- complete_time( tt2, "R" )
tt <- rbind(tt1, tt2)

## remove NA
tt <- tt %>%
  mutate(V4 = as.numeric(V4)) %>%
  filter(!is.na(V4))


# n >= x
tt <- tt %>%
  group_by(V2) %>%
  filter(n() >= 1) %>%
  ungroup()


stats <- tt %>%
group_by(V2) %>%
summarise(
   nmbr_y = length(V4),
   mean_y = mean(V4), 
   medn_y = median(V4),
   up.1_y = quantile(V4, 0.75),
   dw.1_y = quantile(V4, 0.25)
)


pp.tt <- ggplot() +
  geom_line(data = stats, aes(x = V2, y = medn_y, color = "Median", linetype = "Median"), linewidth = 1.5) + 
  geom_line(data = stats, aes(x = V2, y = up.1_y, color = "Upper",  linetype = "Upper"),  linewidth = 0.6) + 
  geom_line(data = stats, aes(x = V2, y = dw.1_y, color = "Lower",  linetype = "Lower"),  linewidth = 0.6) + 
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") + 
  labs(x = "Time (year)", y = "TMB (mut/Mb)", color = "Percentile", linetype = "Percentile") + 
  scale_color_manual(
    values = c("Median" = "magenta", "Upper" = "blue", "Lower" = "skyblue"), 
    breaks = c("Upper", "Median", "Lower"), 
    labels = c("75%", "50%", "25%") 
  ) +
  scale_linetype_manual(
    values = c("Median" = "solid", "Upper" = "dashed", "Lower" = "dashed"), 
    breaks = c("Upper", "Median", "Lower"), 
    labels = c("75%", "50%", "25%") 
  ) +
  guides(
    color = guide_legend(
      title = "Percentile", 
      override.aes = list(
        linetype = c("dashed", "solid", "dashed"), 
        linewidth = c(0.6, 1.5, 0.6)
      )
    )
  ) + 
  theme_minimal() + 
  theme( 
    axis.text.x  = element_text(size = 20, face = "bold"), 
    axis.text.y  = element_text(size = 20, face = "bold"), 
    axis.title.x = element_text(size = 24, face = "bold"), 
    axis.title.y = element_text(size = 24, face = "bold"), 
    panel.border = element_rect(color = "black", fill = NA, linewidth = 2), 
    panel.grid.major = element_line(color = "grey85"),  
    panel.grid.minor = element_line(color = "grey85"), 
    legend.text  = element_text(size = 22),  
    legend.title = element_text(size = 22)  
  )
pp.tt


pp.out <- 
pp.tt + coord_cartesian( xlim = c( -30, 5 ) ) + scale_x_continuous(breaks = seq(-50, 30, by = 5)) 
pp.out


ggsave("TMB.png", plot = pp.out, dpi=2400, width = 8, height = 5)


write.table(stats, "tmb.tsv", sep = "\t", quote = FALSE, row.names = FALSE)



rm(list = ls())
graphics.off()



## Ensemble plot of VAF ========================================================================================


#### Random selection (too many)
ls | shuf | head -n 50 | xargs -i sh -c 'echo -n -e "{}\t"; tail -n 1 {}Output/cloneout.txt' | cut -f1,2,9|awk '$3 > 1e9' |xargs -n 3 sh -c 'awk -F"\t" "{print FILENAME, \$1-${1}, \$2, \$7, ${1}, ${2}}" ${0}Output/VAF/VAF.txt ${0}Output/VAF/VAF.drg.txt' |sed 's/ /\t/g'|cut -f1-4 | grep -P -v '\t\"VAF' | awk -F"\t" -v OFS="\t" '{print $1, $2 * CR, $3, $4}' > ../ensemble.VAF..txt 
### !!! Change: CR (conversion rate), eg, into 0.26 !!! 
### Assume 50 


library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)


vvr <- read.table("clipboard", header=F)


# V1: file name
# V2: Time
# V3: tumor_content
# V4: VAF_primary


# tumor content
vv <- vvr[ vvr$V3 == 0.8, ]
#vv <- vvr[ vvr$V3 == 1.0, ]

vv$V4 <- as.numeric(vv$V4)


# top X
sorted_data <- vv %>%
  group_by(V1, V2) %>%
  arrange(desc(V4)) %>%  
  slice_head(n = 20)  


renamed_data <- sorted_data %>%
  group_by(V1, V2) %>%
  mutate(V3_new = row_number())


## complete lacking time for aggregation
complete_time <- function( data, LorR ) {
  allTime <- sort( unique( data$V2 ) )
  
  data %>%
    group_by(V1,V3_new) %>%
    complete(V2 = allTime) %>%
    mutate(
      left  = min( which( !is.na(V4) ) ) - 1,
      right = max( which( !is.na(V4) ) ) + 1,
      
      V4 = if   (LorR == "L") {
         if_else( row_number() <= left,  as.numeric(0), as.numeric(V4) )
      } else if (LorR == "R") {
         if_else( right <= row_number(), as.numeric(0), as.numeric(V4) )
      } else {
         V4
      }, 
      
      V4 = ifelse(is.na(V4), zoo::na.approx(V4, na.rm = FALSE, rule=1), V4),
    ) %>%
    ungroup()
} 

renamed_data1 <- renamed_data[ grepl("VAF\\.txt$",       renamed_data$V1), ]
renamed_data2 <- renamed_data[ grepl("VAF\\.drg\\.txt$", renamed_data$V1), ]
renamed_data1 <- complete_time( renamed_data1, "L" )
renamed_data2 <- complete_time( renamed_data2, "R" )
renamed_data <- rbind(renamed_data1, renamed_data2) 

## remove NA
renamed_data <- renamed_data %>%
  mutate(V4 = as.numeric(V4)) %>%
  filter(!is.na(V4))


## n >= x
renamed_data <- renamed_data %>%
  group_by(V2, V3_new) %>%
  filter(n() >= 1) %>%
  ungroup()


stats.vv <- renamed_data %>%
  group_by(V2, V3_new) %>%
  summarise(
     nmbr_y = length(V4),
     mean_y = mean(V4),
     medn_y = median(V4),
     up.1_y = quantile(V4, 0.75),
     dw.1_y = quantile(V4, 0.25),
    .groups = 'drop'
  )


col        <- rainbow(length(unique( stats.vv$V3_new )))
names(col) <- unique( stats.vv$V3_new )


stats.vv$V3_new <- as.factor(stats.vv$V3_new)
pp.vv <- ggplot( stats.vv, aes(x = V2, y = medn_y, color = V3_new, group = V3_new) ) +
  geom_line( linewidth = 1) +
  geom_point(size = 2, shape=1) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "black") + 
  labs(x = "Time (year)", y = "VAF") + 
  scale_color_manual(values = col) +
  theme_minimal() +
  theme( 
    axis.text.x  = element_text(size = 20, face = "bold"), 
    axis.text.y  = element_text(size = 20, face = "bold"), 
    axis.title.x = element_text(size = 24, face = "bold"), 
    axis.title.y = element_text(size = 24, face = "bold"), 
    panel.border = element_rect(color = "black", fill = NA, linewidth = 2), 
    panel.grid.major = element_line(color = "grey85"),  
    panel.grid.minor = element_line(color = "grey85"),  
    legend.position = "none"
  )
pp.vv


pp.out <- 
pp.vv + coord_cartesian( xlim = c( -30, 5 ), ylim=c( 0, 0.5 ) ) + scale_x_continuous(breaks = seq(-50, 30, by = 5))
pp.out


ggsave("VAF.png", plot = pp.out, dpi=2400, width = 8, height = 5)


write.table(stats.vv, "stats.vv.tsv", sep = "\t", quote = FALSE, row.names = FALSE)



rm(list = ls())
graphics.off()



